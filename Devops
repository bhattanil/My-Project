Name – Anil Bhatt

Dockerfile for nginx 1.19
Write a Dockerfile to run nginx version 1.19 in a container. Choose a base image, considering security best practices, and aim for the image to pass a container image security test
Your answer

FROM nginx:1.19-alpine
RUN apt install nginx
COPY ./html /use/share/nginx/
COPY ./nginx.conf /etc/nginx/
EXPOSE 80
ENTRYPOINT [“nginx”, “-g”, “daemon off;”]

Docker build -t abc_nginx:1.19-alpine .
Docker push #push image to docker hub



Kubernetes StatefulSet
Write a Kubernetes StatefulSet to deploy the nginx container from the previous question. Utilize persistent volume claims and define resource limits for optimal performance.
Your answer

—
apiVersion: v1
kind: StatefulSet
metadata:
     name: app_name
     app: abc
spec:
    replicas: 3
    selector:
        matchLabels:
           app: abc
    templates:
        metadata:
             name: app_name
        spec:
            containers:
                 image: abc_nginx:1.19-alpine
                 ports:
                      container ports: 80
             resources:
                 requests:
                     cpu: “500m”
                     mem: “500Mi”
                 limits:
                     cpu: “500m”
                     mem: “500Mi”
             volumeMount:
                   name: app_data
                   mountPath: /data
          volumeClaimTemplates:
name: app_data
requests:
    access method: [ReadWriteOnce]
    storage: “1Gi”
—
apiVersion: v1
kind: Service
metadata:
     name: app_service
spec:
    selector:
       app: abc
service:
     name: abc_service
     ports:
         port:80
         targetPort:80
         NodePort: 32000
type: NodePort

Build a Deployment Pipeline
Set up a streamlined build and deployment pipeline for the nginx application using GitHub Actions or an equivalent CI/CD tool. Ensure the pipeline covers building the Docker image, running security checks, and deploying to a Kubernetes cluster.
Your answer

Pipeline{
Stages{
    Stage(“git clone”){
        Steps{
           Sh “Git scm code to ”
}
}
Stage(“code security scan”){
        Steps{
           Sh “sonarqube check”
}
}
Stage(“Build”){
        Steps{
           Sh “install all dependencies”
           Sh “grqdlew build .”
}
}
Stage(“Docker Image Build”){
        Steps{
           Sh “docker build .”
           Sh “test case docker”
}
}
Stage(“Docker Image Push”){
        Steps{
           Sh “docker push repo:image ”
}
}
Stage(“Docker scan”){
        Steps{
           Sh “docker scan repo:image”
}
}
Stage(“Kubernetes clone code”){
        Steps{
           Sh “git clone code from git repo ”
}
}
Stage(“code security san kubernetes”){
        Steps{
           Sh “sonarqube check”
}
}
Stage(“Kubernetes deploy code”){
        Steps{
           withCredential(abccredentialid) # stored in credential
           Sh “kubelet apply -f app.yml ”
}
}
Post{
    Success{
         Echo ”success”
}
   Failure{
        Echo “failed”
}
Post(ws)
}

Text Manipulation Problem
Choose or create a text manipulation problem that involves using awk, sed, tr, and/or grep. Solve the problem, considering efficiency and readability.
Your answer

Awk ‘{print $1 $2}’ abc.csv
Tr ‘a-z’ ‘A-Z’ abc.csv
Sed -I ‘s|ab|xy|g’ abc.csv
Grep ‘error’ abc.csv

Text Manipulation with an Object Orientated Programming Language
Solve the text manipulation problem from the previous question using any Object Orientated Programming language of your choice. Provide a clear and well-documented solution.
Your answer

Class text_manipulation(text)
   Def self_text(self, text):
          self_text(self, text)
   Def self_test_upper(text):
         self_test.upper(text)
text=”Hello this is text manipulation”
text_manipulation.self_test_upper(text)

Sum of Even Fibonacci Numbers
Write a program in a Object Orientated Programming language of your choice to calculate the sum of the first 100 even-valued Fibonacci numbers. Consider efficiency and demonstrate good coding practices.
Your answer

#!/use/local/bin/python

Class sum_fib(limit)
   a,b=0,1
   sum=0
   while b<limit:
       if b%2 ==0:
       then
           sum=sum+b
       else:
          print(“the no. is odd”)
    a,b=b,a+b
limit=100
sum_fib(limit)
print(sum)

Intersection of Sorted Arrays
Write a function in a Object Orientated Programming language of your choice that takes two sorted arrays of integers as input and returns an array containing numbers common to both arrays without duplicates.
Your answer

class ArrayIntersection:
   def __init__(self, array1, array2):
      self.array1 = array1
      self.array2 = array2
   def find_intersection(

# Function to find the intersection of two arrays
# It returns a list containing the common elements
def intersection(a, b):
    res = []
    m = len(a)
    n = len(b)

    for i in range(m):
      
        # Note that duplicates must be 
        # consecutive in a sorted array
        if i > 0 and a[i - 1] == a[i]:
            continue

        # Since we are only searching distinct
        # elements of a[] in b[] and we break as 
        # soon we find a match, we get only
        # distinct elements in result
        for j in range(n):
            if a[i] == b[j]:
                res.append(a[i])
                break

    return res

# Driver code
a = [3, 5, 10, 10, 10, 15, 15, 20]
b = [5, 10, 10, 15, 30]
res = intersection(a, b)
print(" ".join(map(str, res)))



Decimal Digit Transformatio
write a function in an Object Orientated Programming language of your choice that, when passed a decimal digit X, calculates and returns the value of X + XX + XXX + XXXX. For example, if X is 3, the function should return 3702 (3 + 33 + 333 + 3333). Ensure the function handles valid inputs and provides meaningful error messages for invalid inputs.
Your answer
```
class DigitSumCalculator:
    def calculate_sum(self, digit):
        """
        Calculates the sum of X + XX + XXX + XXXX.

        Args:
            digit (int): A decimal digit between 1 and 9.

        Returns:
            int: The calculated sum.

        Raises:
            TypeError: If the input is not an integer.
            ValueError: If the input is not a decimal digit.
        """

        # Check if input is an integer
        if not isinstance(digit, int):
            raise TypeError("Input must be an integer.")

        # Check if input is a decimal digit
        if not 1 <= digit <= 9:
            raise ValueError("Input must be a decimal digit between 1 and 9.")

        # Calculate the sum
        total = 0
        for i in range(1, 5):
            total += int(str(digit) * i)

        return total

Example usage:
calculator = DigitSumCalculator()
print(calculator.calculate_sum(3))  # Output: 3702
```





